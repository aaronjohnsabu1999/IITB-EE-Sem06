node Decoder (M: int) returns (N: int);
var I, Q: bool^4;
let
	(I[3], I[2], I[1], I[0]) = if   (M =  0) then (false, false, false, false)
				else if (M =  1) then (false, false, false, true)
				else if (M =  2) then (false, false, true,  false)
				else if (M =  3) then (false, false, true,  true)
				else if (M =  4) then (false, true,  false, false)
				else if (M =  5) then (false, true,  false, true)
				else if (M =  6) then (false, true,  true,  false)
				else if (M =  7) then (false, true,  true,  true)
				else if (M =  8) then (true,  false, false, false)
				else if (M =  9) then (true,  false, false, true)
				else if (M = 10) then (true,  false, true,  false)
				else if (M = 11) then (true,  false, true,  true)
				else if (M = 12) then (true,  true,  false, false)
				else if (M = 13) then (true,  true,  false, true)
				else if (M = 14) then (true,  true,  true,  false)
				else		      (true,  true,  true,  true);
	Q = TRF_LT(I);
	N = if  (not(Q[3]) and not(Q[2]) and not(Q[1]) and not(Q[0])) then  0
	else if (not(Q[3]) and not(Q[2]) and not(Q[1]) and    (Q[0])) then  1
	else if (not(Q[3]) and not(Q[2]) and    (Q[1]) and not(Q[0])) then  2
	else if (not(Q[3]) and not(Q[2]) and    (Q[1]) and    (Q[0])) then  3
	else if (not(Q[3]) and    (Q[2]) and not(Q[1]) and not(Q[0])) then  4
	else if (not(Q[3]) and    (Q[2]) and not(Q[1]) and    (Q[0])) then  5
	else if (not(Q[3]) and    (Q[2]) and    (Q[1]) and not(Q[0])) then  6
	else if (not(Q[3]) and    (Q[2]) and    (Q[1]) and    (Q[0])) then  7
	else if (   (Q[3]) and not(Q[2]) and not(Q[1]) and not(Q[0])) then  8
	else if (   (Q[3]) and not(Q[2]) and not(Q[1]) and    (Q[0])) then  9
	else if (   (Q[3]) and not(Q[2]) and    (Q[1]) and not(Q[0])) then 10
	else if (   (Q[3]) and not(Q[2]) and    (Q[1]) and    (Q[0])) then 11
	else if (   (Q[3]) and    (Q[2]) and not(Q[1]) and not(Q[0])) then 12
	else if (   (Q[3]) and    (Q[2]) and not(Q[1]) and    (Q[0])) then 13
	else if (   (Q[3]) and    (Q[2]) and    (Q[1]) and not(Q[0])) then 14
	else 								   15;

tel

-- S[0], O[0] -> Sensor and Traffic Light at one direction of main road
-- S[1], O[1] -> Sensor and Traffic Light at the other direction of main road
-- S[2], O[2] -> Sensor and Traffic Light at one direction of side road
-- S[3], O[3] -> Sensor and Traffic Light at the other direction of side road
node TRF_LT (S: bool^4) returns (O: bool^4);
var SIDE: bool;
let
	SIDE	= (S[2]=1 or S[3]=1);
	O[0]	= if (S[2]=0 and S[3]=0) then true
		else not Countdown(SIDE and not(false->pre(SIDE)),  10);
	O[1]	= if (S[2]=0 and S[3]=0) then true
		else not Countdown(SIDE and not(false->pre(SIDE)),  10);
	O[2]	= if (S[2]=0) then false
		else     Countdown(SIDE and not(false->pre(SIDE)),  10);
	O[3]	= if (S[3]=0) then false
		else     Countdown(SIDE and not(false->pre(SIDE)),  10);
tel

node Countdown (reset: bool; start: int) returns (C: bool);
var O: int;
let
	O = start -> if reset then start
		else if pre(O)>0 then pre(O)-1
		else start;
	C = true -> if O=0 then not(pre(C)) else pre(C);
tel
